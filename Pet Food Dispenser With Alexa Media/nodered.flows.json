[
    {
        "id": "dfe2b5e1d2829cb9",
        "type": "group",
        "z": "b384990faef8d724",
        "name": "Ciccio Counter Alexa",
        "style": {
            "fill": "#ff7f7f",
            "fill-opacity": "0.49",
            "label": true,
            "label-position": "n",
            "color": "#ffff00"
        },
        "nodes": [
            "c0ca4ff9a699f652",
            "de0212e5881580b3",
            "d20df7c4b6db1e9e",
            "cb288ff98b85cd74",
            "597d9838777da906",
            "cf3cd6fc11582a2e",
            "6e092eac5b60a4e4"
        ],
        "x": 14,
        "y": 1119,
        "w": 972,
        "h": 182
    },
    {
        "id": "c0ca4ff9a699f652",
        "type": "function",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "function 4",
        "func": "// Recupera lo stato del sensore \"sensor.conteggio_crocchette\"\nlet crocchetteState = global.get('homeassistant.homeAssistant.states[\"sensor.conteggio_crocchette\"]');\nlet crocchetteCount = crocchetteState ? parseInt(crocchetteState.state, 10) : undefined;\n\n// Recupera lo stato del sensore \"binary_sensor.crocchette_alimentazione\"\nlet crocchetteSensor = global.get('homeassistant.homeAssistant.states[\"binary_sensor.crocchette_alimentazione\"]');\nlet lastChanged = crocchetteSensor ? new Date(crocchetteSensor.last_changed) : null;\n\nlet now = new Date();\nlet currentDay = now.getDate();\nlet lastDay = lastChanged ? lastChanged.getDate() : -1;\nlet message;\n\n// Formatta la data e l'ora dell'ultima erogazione senza secondi\nlet formattedDate = lastChanged ? lastChanged.toLocaleDateString('it-IT') : 'N/A';\nlet formattedTime = lastChanged ? lastChanged.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' }) : 'N/A';\n\n// Verifica se `crocchetteCount` è ok\nif (crocchetteCount === undefined || isNaN(crocchetteCount)) {\n    message = \"Non riesco a connettermi al distributore di crocchette per stabilire quante volte ha mangiato Ciccio, riprova più tardi.\";\n} else if (crocchetteCount === 0) {\n    // Controlla se l'ultima erogazione di crocchette è stata ieri\n    if (currentDay - lastDay === 1) {\n        message = `Oggi Ciccio non ha mai mangiato, povero Ciccio affamato! Dategli da mangiare! Ieri ha mangiato l'ultima volta alle ${formattedTime}.`;\n    } else {\n        message = \"Oggi Ciccio non ha mai mangiato, povero Ciccio affamato! Dategli da mangiare!\";\n    }\n} else if (crocchetteCount > 0 && crocchetteCount <= 3) {\n    // Corregge il plurale/singolare di \"volta\"\n    let volteString = crocchetteCount === 1 ? 'volta' : 'volte';\n    message = `Oggi Ciccio ha mangiato ${crocchetteCount} ${volteString}. Ultima volta ${currentDay === lastDay ? 'oggi' : 'ieri'} alle ${formattedTime}.`;\n} else if (crocchetteCount > 3) {\n    message = `Ciccio è un porco! perché oggi ha già mangiato ${crocchetteCount} volte. Ultima volta ${currentDay === lastDay ? 'oggi' : 'ieri'} alle ${formattedTime}.`;\n}\n\n// Costruisce il payload corretto per Alexa\nmsg = {\n    payload: {\n        data: {\n            message: message\n        }\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "d20df7c4b6db1e9e"
            ]
        ]
    },
    {
        "id": "de0212e5881580b3",
        "type": "inject",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1260,
        "wires": [
            [
                "c0ca4ff9a699f652"
            ]
        ]
    },
    {
        "id": "d20df7c4b6db1e9e",
        "type": "api-call-service",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "2o Echo Dot",
        "server": "1c37c350.3f926d",
        "version": 7,
        "debugenabled": true,
        "action": "notify.alexa_media_2o_echo_dot",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "payload.data",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "notify",
        "service": "alexa_media_2o_echo_dot",
        "x": 530,
        "y": 1160,
        "wires": [
            [
                "6e092eac5b60a4e4"
            ]
        ]
    },
    {
        "id": "cb288ff98b85cd74",
        "type": "ha-switch",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "Ciccio Switch",
        "version": 0,
        "debugenabled": false,
        "inputs": 0,
        "outputs": 2,
        "entityConfig": "bbb7588c8f90f20c",
        "enableInput": false,
        "outputOnStateChange": false,
        "outputProperties": [
            {
                "property": "outputType",
                "propertyType": "msg",
                "value": "state change",
                "valueType": "str"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 110,
        "y": 1160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "597d9838777da906",
        "type": "trigger-state",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "Racc.Trigger",
        "server": "1c37c350.3f926d",
        "version": 5,
        "inputs": 0,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "switch.ciccio_switch"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": false,
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "c0ca4ff9a699f652"
            ],
            []
        ]
    },
    {
        "id": "cf3cd6fc11582a2e",
        "type": "api-call-service",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "Ciccio Off",
        "server": "1c37c350.3f926d",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.ciccio_switch"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "switch",
        "service": "turn_off",
        "x": 900,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "6e092eac5b60a4e4",
        "type": "change",
        "z": "b384990faef8d724",
        "g": "dfe2b5e1d2829cb9",
        "name": "Reset Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1160,
        "wires": [
            [
                "cf3cd6fc11582a2e"
            ]
        ]
    },
    {
        "id": "1c37c350.3f926d",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "id",
        "deviceSelector": "id",
        "entitySelector": "id",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "bbb7588c8f90f20c",
        "type": "ha-entity-config",
        "server": "1c37c350.3f926d",
        "deviceConfig": "477a03a870987fd9",
        "name": "Ciccio Switch",
        "version": "6",
        "entityType": "switch",
        "haConfig": [
            {
                "property": "name",
                "value": "Ciccio Switch"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "477a03a870987fd9",
        "type": "ha-device-config",
        "name": "Ciccio Switch",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    }
]