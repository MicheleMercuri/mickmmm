[
    {
        "id": "e9d21f01c61fb40c",
        "type": "tab",
        "label": "Tesla PV DLM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ce77ad8d41253df",
        "type": "group",
        "z": "e9d21f01c61fb40c",
        "name": "PV DLM Charge",
        "style": {
            "fill": "#ffff7f",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "c67ec0a3b2a2b2f9",
            "f8e0b2e971ba6fa3",
            "6d3769fcc7dba1db",
            "88bfeadf2645b477",
            "9baf7673b8f04ce9",
            "6955be6369ecb2e0",
            "20a7d19266888522",
            "51794624f9522e34",
            "c1807d2c3b202c27",
            "2d7b219a5249bda5",
            "bd249079cd7f3817",
            "c022d015cbf4af62",
            "4b064bb92807578a",
            "536e1fb4e9a73cf6",
            "98ce156eab869738",
            "efa32a942ebf5a6c"
        ],
        "x": 554,
        "y": 219,
        "w": 1232,
        "h": 502
    },
    {
        "id": "b6acf31e6685587b",
        "type": "group",
        "z": "e9d21f01c61fb40c",
        "name": "Grid DLM Charge",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.78",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "8a3ece757a132614",
            "4063f9f2e864b3f5",
            "f3998584b25d4935",
            "e89768f5655da1cb",
            "39da3104420a011b",
            "91b0792155759ecd",
            "0f5827537fca051d",
            "7b2a6c675f4d57c4",
            "7fec97a37e78c75e",
            "eece0e881d2eb80d",
            "1dc9fc3a97f3da99",
            "39ae1bfa6266049f",
            "8260ed5fb5732a70",
            "c22dc58ff3798e62",
            "6ac696fd75ba22a7",
            "e8758da8660a21b3",
            "a8d929c28bbf6034"
        ],
        "x": 554,
        "y": 739,
        "w": 1232,
        "h": 502
    },
    {
        "id": "0be9f4d33c868405",
        "type": "group",
        "z": "e9d21f01c61fb40c",
        "name": "Off CRG Select",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.67",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "e669f375f35b5312",
            "031cf3d077710a8e"
        ],
        "x": 554,
        "y": 79,
        "w": 1232,
        "h": 122
    },
    {
        "id": "0464241e3946cd01",
        "type": "group",
        "z": "e9d21f01c61fb40c",
        "name": "DLM Off-Peak Charge",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.78",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "98e39d1805cb9376",
            "1bb88ae8252383fa",
            "6267992fa89f436d",
            "1bf6dee8b0279c07",
            "04e49e8b8d332406",
            "5bac05b5b32131a7",
            "5e9e7f6396ba4d19",
            "5e9053931165e003",
            "3262e470e9d7a178",
            "de80b41143fb9a52",
            "caeed6ca313bee3e",
            "13e75b02570fff11",
            "8e01d5f7b3fcd65c",
            "9ffd7dfea8bb9f1a",
            "807f5bae79621bf2",
            "71804a28695be151",
            "ecc67763a4df93da",
            "73530ed88f7e300b",
            "0586a199a5f1a9a5",
            "433ac13662deb049",
            "428088abba73caf5",
            "c66a29ccdba3abb3",
            "06c19f7cbdabd93f"
        ],
        "x": 554,
        "y": 1279,
        "w": 1232,
        "h": 562
    },
    {
        "id": "c67ec0a3b2a2b2f9",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Kw PV",
        "func": "// Ottengo i valori di potenza dai sensori di fotovoltaico, wallbox, prelievo da rete e immissione in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.input_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"sensor.active_power\"].state');\nvar power4 = global.get('homeassistant.homeAssistant.states[\"sensor.pv_to_grid_kwp\"].state');\nvar power8 = global.get('homeassistant.homeAssistant.states[\"sensor.power_grid_kwp\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\nlet w4 = parseFloat(power4);\nlet w8 = parseFloat(power8);\n\n// Calcolo la somma delle potenze per avere il netto da fotovoltiaco disponibile\nlet y = w1 - w3 + w4 + w2 - w8;\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza moltiplicandolo per gli ampere \nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\nlet x = 1; // Inizio la sequenza con x = 1 per trovare il valore da settare in ampere per la tesla\n\nwhile (x * w5 < y) {\n    x++;\n}\n\nif (x * w5 > y) {\n    x--; // Preseguo fino a quando supera y e quindi diminuisco x di una unitÃ \n}\n\nif (x > maxamp) {\n    x = maxamp; // Mi assicuro che il valore massimo di x sia minore del max amperaggio consentito\n}\n\nif (x < minamp) {\n    x = minamp; // Mi assicuro che il valore minimo di x non sia minore del min amperaggio consentito\n}\n\nmsg.payload = x; // Setto il valore di x come payload del messaggio e lo passo al nodo successivo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 560,
        "wires": [
            [
                "f8e0b2e971ba6fa3"
            ]
        ]
    },
    {
        "id": "f8e0b2e971ba6fa3",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Set Amp Value 1",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": true,
        "domain": "number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.model3_charging_amps"
        ],
        "data": "{\"value\": payload}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 960,
        "y": 320,
        "wires": [
            [
                "9baf7673b8f04ce9"
            ]
        ]
    },
    {
        "id": "6d3769fcc7dba1db",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 360,
        "wires": [
            [
                "c67ec0a3b2a2b2f9"
            ]
        ]
    },
    {
        "id": "9baf7673b8f04ce9",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 440,
        "wires": [
            [
                "88bfeadf2645b477"
            ]
        ]
    },
    {
        "id": "6955be6369ecb2e0",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Cycle",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1390,
        "y": 480,
        "wires": [
            [
                "51794624f9522e34"
            ],
            [
                "bd249079cd7f3817"
            ]
        ]
    },
    {
        "id": "20a7d19266888522",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "88bfeadf2645b477"
            ]
        ]
    },
    {
        "id": "8a3ece757a132614",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Kw Grid",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n// calcolo la potenza da disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// la potenza del vostro contatore va settata dal sensore \"input_number.electric_meter_power\"\nlet y = w3 + w1 - w2;\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza moltiplicandolo per gli ampere \nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\nlet x = 1; // Inizio la sequenza con x = 1 per trovare il valore da settare in ampere per la tesla\n\nwhile (x * w5 < y) {\n    x++;\n}\n\nif (x * w5 > y) {\n    x--; // Preseguo fino a quando x supera y e quindi diminuisco x di una unitÃ \n}\n\nif (x > maxamp) {\n    x = maxamp; // Mi assicuro che il valore massimo di x sia minore del max amperaggio consentito\n}\n\nif (x < minamp) {\n    x = minamp; // Mi assicuro che il valore minimo di x non sia minore del min amperaggio consentito\n}\n\nmsg.payload = x; // Setto il valore di x come payload del messaggio e lo passo al nodo successivo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 920,
        "wires": [
            [
                "4063f9f2e864b3f5"
            ]
        ]
    },
    {
        "id": "4063f9f2e864b3f5",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Set Amp Value 2",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": true,
        "domain": "number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.model3_charging_amps"
        ],
        "data": "{\"value\": payload}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 880,
        "y": 960,
        "wires": [
            [
                "39da3104420a011b"
            ]
        ]
    },
    {
        "id": "f3998584b25d4935",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 780,
        "wires": [
            [
                "7fec97a37e78c75e"
            ]
        ]
    },
    {
        "id": "e89768f5655da1cb",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Check Grid Kw",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n// calcolo la potenza del contatore disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// la potenza del vostro contatore va settata dal sensore \"input_number.electric_meter_power\"\nlet y = w3 + (w1);\n\n// Ottengo il valore di tensione di rete che serve per il calcolo preciso della potenza di ricarica della Tesla\nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo lo stato degli ampere settati in Tesla\nvar ampere1 = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].state');\nlet a1 = parseFloat(ampere1);\n\n// Calcolo il valore della potenza di 1 ampere Tesla\nlet x = w5 * 1;\n\n// Calcolo la differenza tra potenza residua da contatore e 1 ampere\nlet z = y - x;\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\n// Verifico le condizioni e setto il payload\nif (z > 0 && z > x && a1 < maxamp) {\n    msg.payload = 1; // Se z Ã¨ maggiore di zero e maggiore di x, imposto payload a 1, cioÃ¨ ho potenza disponibile dal contatore e devo aumentare gli ampere di Tesla\n} else if (z > 0 && z > x && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < x) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < x && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z < 0 && a1 === minamp) {\n    msg.payload = 0; // Se z Ã¨ minore di zero e a1 Ã¨ 1, imposto payload sempre a 0, ho potenza netta dal contatore negativa ma ampere Tesla Ã¨ giÃ  al minimo e quindi non posso diminuirlo ulteriormente\n} else if (z >= -x && z <= x) {\n    msg.payload = 0; // Se z Ã¨ compreso tra x e -x  imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else {\n    msg.payload = 1; // ho potenza netta dal contatore negativa e quindi devo ridurre ampere Tesla\n}\n\n// only for debug\nmsg.y_payload = y;\nmsg.z_payload = z;\nmsg.x_payload = x;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1000,
        "wires": [
            [
                "91b0792155759ecd"
            ]
        ]
    },
    {
        "id": "39da3104420a011b",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 1000,
        "wires": [
            [
                "e89768f5655da1cb"
            ]
        ]
    },
    {
        "id": "91b0792155759ecd",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Cycle",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 1000,
        "wires": [
            [
                "39ae1bfa6266049f"
            ],
            [
                "7b2a6c675f4d57c4"
            ]
        ]
    },
    {
        "id": "0f5827537fca051d",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1370,
        "y": 1100,
        "wires": [
            [
                "e89768f5655da1cb"
            ]
        ]
    },
    {
        "id": "7b2a6c675f4d57c4",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1690,
        "y": 960,
        "wires": [
            [
                "eece0e881d2eb80d"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "7fec97a37e78c75e",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Kw Grid",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n// calcolo la potenza disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// la potenza del vostro contatore va settata dal sensore \"input_number.electric_meter_power\"\nlet y = w3 + w1 + w2;\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza moltiplicandolo per gli ampere \nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\nlet x = 1; // Inizio la sequenza con x = 1 per trovare il valore da settare in ampere per la tesla\n\nwhile (x * w5 < y) {\n    x++;\n}\n\nif (x * w5 > y) {\n    x--; // Preseguo fino a quando x supera y e quindi diminuisco x di una unitÃ \n}\n\nif (x > maxamp) {\n    x = maxamp; // Mi assicuro che il valore minimo di x sia 1\n}\n\nif (x < minamp) {\n    x = minamp; // Mi assicuro che il valore minimo di x non sia minore del min amperaggio consentito\n}\n\nmsg.payload = x; // Setto il valore di x come payload del messaggio e lo passo al nodo successivo\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 840,
        "wires": [
            [
                "4063f9f2e864b3f5"
            ]
        ]
    },
    {
        "id": "88bfeadf2645b477",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Check PV Kw",
        "func": "// Ottengo i valori di potenza dai sensori di fotovoltaico, wallbox, prelievo da rete e immissione in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.input_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"sensor.active_power\"].state');\nvar power4 = global.get('homeassistant.homeAssistant.states[\"sensor.pv_to_grid_kwp\"].state');\nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.power_grid_kwp\"].state');\n\nlet w1 = parseFloat(power1);\nlet w3 = parseFloat(power3);\nlet w4 = parseFloat(power4);\nlet w5 = parseFloat(power5);\n\n// Calcolo la somma delle potenze per avere il netto da fotovoltiaco disponibile\nlet y = w1 - w3 + w4 - w5;\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\n// Ottengo lo stato degli ampere settati in Tesla\nvar ampere1 = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].state');\nlet a1 = parseFloat(ampere1);\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza residua disponibile\nvar voltage = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet volt = parseFloat(voltage);\n\n// Calcolo la potenza residua da PV\nlet z = y - volt;\n\n// Verifico le condizioni e setto il payload\nif (z > 0 && z > volt && a1 < maxamp) {\n    msg.payload = 1; // Se z Ã¨ maggiore di zero e maggiore di volt, imposto payload a 1, cioÃ¨ ho potenza disponibile dal PV e devo aumentare gli ampere di Tesla\n} else if (z > 0 && z > volt && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < volt) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < volt && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z < 0 && a1 === minamp) {\n    msg.payload = 0; // Se z Ã¨ minore di zero e a1 Ã¨ 1, imposto payload sempre a 0, ho potenza netta dal PV negativa ma ampere Tesla Ã¨ giÃ  al minimo e quindi non posso diminuirlo ulteriormente\n} else if (z >= - volt && z <= volt) {\n    msg.payload = 0; // Se z Ã¨ compreso tra x e -x  imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else {\n    msg.payload = 1; // ho potenza netta dal PV negativa e quindi devo ridurre ampere Tesla\n}\n\nmsg.y_payload = y;\nmsg.z_payload = z;\nmsg.v_payload = volt;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 380,
        "wires": [
            [
                "6955be6369ecb2e0"
            ]
        ]
    },
    {
        "id": "a92683924de07159",
        "type": "trigger-state",
        "z": "e9d21f01c61fb40c",
        "name": "Charge Select",
        "server": "1c37c350.3f926d",
        "version": 4,
        "inputs": 0,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "input_select.tesla_chargemode_select",
        "entityIdType": "exact",
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is_not",
                "comparatorValueDatatype": "str",
                "comparatorValue": "Off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "Off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": false,
        "x": 90,
        "y": 40,
        "wires": [
            [
                "9c0c476284cc3b7d"
            ],
            []
        ]
    },
    {
        "id": "d7a0200a6e81b137",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "name": "On Crg Switch",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": false,
        "domain": "switch",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.model3_charger"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 260,
        "y": 320,
        "wires": [
            [
                "1d503c2093997c17"
            ]
        ]
    },
    {
        "id": "af2a779af0d0eb19",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "name": "Switch CRG Mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PV DLM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Grid DLM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Off Peak DLM",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "031cf3d077710a8e"
            ],
            [
                "c67ec0a3b2a2b2f9"
            ],
            [
                "8a3ece757a132614"
            ],
            [
                "8e01d5f7b3fcd65c"
            ]
        ]
    },
    {
        "id": "031cf3d077710a8e",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "g": "0be9f4d33c868405",
        "name": "Off Crg Switch",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": false,
        "domain": "switch",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.model3_charger"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1680,
        "y": 160,
        "wires": [
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "e669f375f35b5312",
        "type": "trigger-state",
        "z": "e9d21f01c61fb40c",
        "g": "0be9f4d33c868405",
        "name": "Crg Select Off",
        "server": "1c37c350.3f926d",
        "version": 4,
        "inputs": 0,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "input_select.tesla_chargemode_select",
        "entityIdType": "exact",
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "Off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is_not",
                "comparatorValueDatatype": "str",
                "comparatorValue": "Off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": false,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "031cf3d077710a8e"
            ],
            []
        ]
    },
    {
        "id": "883268c16c4f0d74",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "name": "close gate",
        "func": "return [[msg,{payload:'close',topic:'control'}]]",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "87d2674b993c9ff3"
            ]
        ],
        "info": "Evita che una volta avviatoil flusso se ne possa avviare un secondo"
    },
    {
        "id": "87d2674b993c9ff3",
        "type": "gate",
        "z": "e9d21f01c61fb40c",
        "name": "Gate",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memoryOnly",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "d7a0200a6e81b137"
            ]
        ]
    },
    {
        "id": "a654c8f0fba7331d",
        "type": "link in",
        "z": "e9d21f01c61fb40c",
        "name": "Close Gate Tesla",
        "links": [
            "aefa4f398f152184",
            "71ceb2f124fe727e"
        ],
        "x": 305,
        "y": 260,
        "wires": [
            [
                "87d2674b993c9ff3"
            ]
        ]
    },
    {
        "id": "3d21b8ac0a5ca797",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "name": "open gate",
        "func": "return [[msg,{payload:'open',topic:'control'}]]",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 780,
        "wires": [
            [
                "aefa4f398f152184"
            ]
        ]
    },
    {
        "id": "aefa4f398f152184",
        "type": "link out",
        "z": "e9d21f01c61fb40c",
        "name": "Open Gate Tesla",
        "mode": "link",
        "links": [
            "a654c8f0fba7331d"
        ],
        "x": 2285,
        "y": 640,
        "wires": []
    },
    {
        "id": "c1807d2c3b202c27",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "PV DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1610,
        "y": 380,
        "wires": [
            [
                "536e1fb4e9a73cf6"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "51794624f9522e34",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "c1807d2c3b202c27"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "ed7faae6d094df4a",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "name": "Select Off CRG mode",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.tesla_chargemode_select"
        ],
        "data": "{\"option\":\"Off\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2080,
        "y": 700,
        "wires": [
            [
                "3d21b8ac0a5ca797"
            ]
        ]
    },
    {
        "id": "eece0e881d2eb80d",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "Grid DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1610,
        "y": 880,
        "wires": [
            [
                "6ac696fd75ba22a7"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "1dc9fc3a97f3da99",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "Grid DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1570,
        "y": 1200,
        "wires": [
            [
                "8260ed5fb5732a70"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "39ae1bfa6266049f",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1570,
        "y": 1080,
        "wires": [
            [
                "1dc9fc3a97f3da99"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "2d7b219a5249bda5",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "PV DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1430,
        "y": 660,
        "wires": [
            [
                "c022d015cbf4af62"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "bd249079cd7f3817",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "2d7b219a5249bda5"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "9c0c476284cc3b7d",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "name": "Tesla is at Home",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "home",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "device_tracker.model3_location_tracker",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 300,
        "y": 40,
        "wires": [
            [
                "9f02f7cc2f9ace59"
            ],
            []
        ],
        "info": "Evita che l'automazione parta \r\ndurante sessioni di ricariche fuori casa"
    },
    {
        "id": "9f02f7cc2f9ace59",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "name": "Set Amp Value 0",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": true,
        "domain": "number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.model3_charging_amps"
        ],
        "data": "{\"value\":0}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "4f53e322a34757af"
            ]
        ],
        "info": "Imposta a 0 la potenza di ricarica della Tesla"
    },
    {
        "id": "654378140a9b4eca",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "name": "Wake UP TESLA",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": false,
        "domain": "button",
        "service": "press",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "button.model3_wake_up"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "4353f2af740d00c5"
            ]
        ]
    },
    {
        "id": "4353f2af740d00c5",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 220,
        "wires": [
            [
                "883268c16c4f0d74"
            ]
        ]
    },
    {
        "id": "4f53e322a34757af",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "name": "Pooling on",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": false,
        "domain": "switch",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.model3_polling"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 390,
        "y": 100,
        "wires": [
            [
                "654378140a9b4eca"
            ]
        ]
    },
    {
        "id": "8e01d5f7b3fcd65c",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Set 100% Target",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": true,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.tesla_battery_charge_target"
        ],
        "data": "{\"value\":100}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 660,
        "y": 1500,
        "wires": [
            [
                "433ac13662deb049"
            ]
        ],
        "info": "Imposta a 0 la potenza di ricarica della Tesla"
    },
    {
        "id": "9ffd7dfea8bb9f1a",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 < s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale, restituisci il messaggio 1\n} else {\n    msg.payload = 1; // Altrimenti, restituisci il messaggio 0\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1320,
        "wires": [
            [
                "807f5bae79621bf2"
            ]
        ]
    },
    {
        "id": "807f5bae79621bf2",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1340,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "98e39d1805cb9376"
            ]
        ]
    },
    {
        "id": "98e39d1805cb9376",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "DLM Grid",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n// calcolo la potenza disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// potenza contatore settata in HA con il sensore \"input_number.electric_meter_power\"\nlet y = w3 + w1 - w2;\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza moltiplicandolo per gli ampere \nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\nlet x = 1; // Inizio la sequenza con x = 1 per trovare il valore da settare in ampere per la tesla\n\nwhile (x * w5 < y) {\n    x++;\n}\n\nif (x * w5 > y) {\n    x--; // Preseguo fino a quando x supera y e quindi diminuisco x di una unitÃ \n}\n\nif (x > maxamp) {\n    x = maxamp; // Mi assicuro che il valore massimo di x sia minore del max amperaggio consentito\n}\n\nif (x < minamp) {\n    x = minamp; // Mi assicuro che il valore minimo di x non sia minore del min amperaggio consentito\n}\n\nmsg.payload = x; // Setto il valore di x come payload del messaggio e lo passo al nodo successivo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1680,
        "wires": [
            [
                "1bb88ae8252383fa"
            ]
        ]
    },
    {
        "id": "1bb88ae8252383fa",
        "type": "api-call-service",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Set Amp Value 3",
        "server": "1c37c350.3f926d",
        "version": 5,
        "debugenabled": true,
        "domain": "number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.model3_charging_amps"
        ],
        "data": "{\"value\": payload}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 900,
        "y": 1640,
        "wires": [
            [
                "04e49e8b8d332406"
            ]
        ]
    },
    {
        "id": "6267992fa89f436d",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1150,
        "y": 1560,
        "wires": [
            [
                "3262e470e9d7a178"
            ]
        ]
    },
    {
        "id": "1bf6dee8b0279c07",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Check Grid Kw",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n// calcolo la potenza disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// la potenza w3 contatore va impostata in HA dal sensore da \"input_number.electric_meter_power\"\nlet y = w3 + (w1);\n\n// Ottengo il valore di tensione di rete che serve per il calcolo preciso della potenza di ricarica della Tesla\nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo lo stato degli ampere settati in Tesla\nvar ampere1 = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].state');\nlet a1 = parseFloat(ampere1);\n\n// Calcolo il valore della potenza di 1 ampere Tesla\nlet x = w5 * 1;\n\n// Calcolo la differenza tra potenza residua da contatore e 1 ampere\nlet z = y - x;\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\n// Verifico le condizioni e setto il payload\nif (z > 0 && z > x && a1 < maxamp) {\n    msg.payload = 1; // Se z Ã¨ maggiore di zero e maggiore di x, imposto payload a 1, cioÃ¨ ho potenza disponibile dal contatore e devo aumentare gli ampere di Tesla\n} else if (z > 0 && z > x && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < x) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z > 0 && z < x && a1 === maxamp) {\n    msg.payload = 0; // Se z Ã¨ maggiore di zero e minore di x, imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else if (z < 0 && a1 === minamp) {\n    msg.payload = 0; // Se z Ã¨ minore di zero e a1 Ã¨ 1, imposto payload sempre a 0, ho potenza netta dal contatore negativa ma ampere Tesla Ã¨ giÃ  al minimo e quindi non posso diminuirlo ulteriormente\n} else if (z >= -x && z <= x) {\n    msg.payload = 0; // Se z Ã¨ compreso tra x e -x  imposto payload a 0, cioÃ¨ non ho potenza sufficente per aumentare di 1 ampere la carica di Tesla e quindi attendo un ciclo successivo\n} else {\n    msg.payload = 1; // ho potenza netta dal contatore negativa e quindi devo ridurre ampere Tesla\n}\n\n// only for debug\nmsg.y_payload = y;\nmsg.z_payload = z;\nmsg.x_payload = x;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1640,
        "wires": [
            [
                "5bac05b5b32131a7"
            ]
        ]
    },
    {
        "id": "04e49e8b8d332406",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1070,
        "y": 1700,
        "wires": [
            [
                "1bf6dee8b0279c07"
            ]
        ]
    },
    {
        "id": "5bac05b5b32131a7",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Cycle",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1390,
        "y": 1580,
        "wires": [
            [
                "13e75b02570fff11"
            ],
            [
                "5e9053931165e003"
            ]
        ]
    },
    {
        "id": "5e9e7f6396ba4d19",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "35",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1350,
        "y": 1740,
        "wires": [
            [
                "1bf6dee8b0279c07"
            ]
        ]
    },
    {
        "id": "5e9053931165e003",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1610,
        "y": 1480,
        "wires": [
            [
                "de80b41143fb9a52"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "3262e470e9d7a178",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Kw Grid",
        "func": "// Inizio con acquisire i dati di potenza dei vari sensori di inverter wallbox prelievo da rete e invio in rete\nvar power1 = global.get('homeassistant.homeAssistant.states[\"sensor.grid_active_power\"].state');\nvar power2 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_1_power\"].state');\nvar power3 = global.get('homeassistant.homeAssistant.states[\"input_number.electric_meter_power\"].state');\n\nlet w1 = parseFloat(power1);\nlet w2 = parseFloat(power2);\nlet w3 = parseFloat(power3);\n\n\n// calcolo la potenza disponibile al netto dei consumi della casa nb. sensor.grid_active_power ha valori negativi in caso di prelievo da rete quindi va sommato e non sottratto\n// la potenza w3 del contatore va impostata in HA dal sensore da \"input_number.electric_meter_power\"\nlet y = w3 + w1 + w2;\n\n// acquisisco il dato del voltaggio corrente che servira per il calcolo della potenza moltiplicandolo per gli ampere \nvar power5 = global.get('homeassistant.homeAssistant.states[\"sensor.wallbox_em_channel_2_voltage\"].state');\nlet w5 = parseFloat(power5);\n\n// Ottengo amperaggio massimo settabile che dipende dalla wallbox o dal carichino\nvar ampmax = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.max');\nlet maxamp = parseFloat(ampmax);\n// amp minimo\nvar ampmin = global.get('homeassistant.homeAssistant.states[\"number.model3_charging_amps\"].attributes.min');\nlet minamp = parseFloat(ampmin);\n\nlet x = 1; // Inizio la sequenza con x = 1 per trovare il valore da settare in ampere per la tesla\n\nwhile (x * w5 < y) {\n    x++;\n}\n\nif (x * w5 > y) {\n    x--; // Preseguo fino a quando x supera y e quindi diminuisco x di una unitÃ \n}\n\nif (x > maxamp) {\n    x = maxamp; // Mi assicuro che il valore massimo di x sia amperaggio massimo settabile\n}\n\nif (x < minamp) {\n    x = minamp; // Mi assicuro che il valore minimo di x non sia minore del min amperaggio consentito\n}\n\nmsg.payload = x; // Setto il valore di x come payload del messaggio e lo passo al nodo successivo\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1420,
        "wires": [
            [
                "1bb88ae8252383fa"
            ]
        ]
    },
    {
        "id": "de80b41143fb9a52",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "Off Peak DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1690,
        "y": 1400,
        "wires": [
            [
                "73530ed88f7e300b"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "caeed6ca313bee3e",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "CRG State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "Off Peak DLM",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1630,
        "y": 1660,
        "wires": [
            [
                "ecc67763a4df93da"
            ],
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "13e75b02570fff11",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "if on Charger",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.model3_charger",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1570,
        "y": 1580,
        "wires": [
            [
                "caeed6ca313bee3e"
            ],
            [
                "ed7faae6d094df4a"
            ]
        ]
    },
    {
        "id": "71804a28695be151",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 1800,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "5e9e7f6396ba4d19"
            ]
        ]
    },
    {
        "id": "ecc67763a4df93da",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1800,
        "wires": [
            [
                "71804a28695be151"
            ]
        ]
    },
    {
        "id": "73530ed88f7e300b",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1320,
        "wires": [
            [
                "0586a199a5f1a9a5"
            ]
        ]
    },
    {
        "id": "0586a199a5f1a9a5",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1490,
        "y": 1320,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "3262e470e9d7a178"
            ]
        ]
    },
    {
        "id": "433ac13662deb049",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Off Peak Calc",
        "func": "var ora_corrente = new Date();\nvar ora_attuale = ora_corrente.getHours();\nvar mezzanotte_oggi = new Date();\nmezzanotte_oggi.setHours(0, 0, 0, 0);\n\n// Ottiene lo stato del sensore binario che controlla se Ã¨ un working day oppuire Ã¨ holiday (on oppure off)\nvar isWorkingDay = global.get('homeassistant').homeAssistant.states['binary_sensor.working_day_tariff_f1_f2'].state === 'on';\n\n// Controlla se oggi Ã¨ un giorno lavorativo o festivo\nif (!isWorkingDay) {\n// Se il giorno Ã¨ festivo, invia direttamente il payload \"off peak ok\" e attiva la ricarica\n    node.send({ payload: \"off peak ok\" });\n\n// Aggiorna il sensore con tempo scaduto perchÃ© Ã¨ un giorno festivo\n    var tempo_rimanente_format = ('00' + ':' + '00' + ':' + '00');\n    var newMsg = {\n        payload: {\n            state: tempo_rimanente_format,\n            attributes: {\n                countdown: tempo_rimanente_format\n            }\n        }\n    };\n    node.send(newMsg);\n    return msg;\n// Se l'orario attuale Ã¨ dalle 23:00 alle 24.00 di oggi oppure Ã¨ compreso tra 24.00 e le 7:00 di oggi autorizza il passaggio del flusso\n} else if ((ora_attuale >= 23 || ora_attuale < 7) && ora_corrente.getTime() >= mezzanotte_oggi.getTime()) {\n    // c\n    node.send({ payload: \"off peak ok\" });\n    var tempo_rimanente_format = ('00' + ':' + '00' + ':' + '00');\n    var newMsg = {\n        payload: {\n            state: tempo_rimanente_format,\n            attributes: {\n                countdown: tempo_rimanente_format\n            }\n        }\n    };\n    node.send(newMsg);\n    return msg;\n} else {\n// Se l'orario attuale non Ã¨ compreso tra le 23:00 e le 07:00 del giorno corrente calcola il tempo rimanente fino alle 23:00\n    var ora_23 = new Date();\n    ora_23.setHours(23, 0, 0, 0);\n\n    var tempo_corrente = ora_corrente.getTime();\n    var tempo_23 = ora_23.getTime();\n// Calcola il tempo rimanente\n    var tempo_rimanente = tempo_23 - tempo_corrente;\n// Invia il messaggio per avviare la ricarica dopo il tempo_rimanente\n    setTimeout(function () {\n        node.send({ payload: \"off peak ok\" });\n    }, tempo_rimanente);\n// Funzione per aggiornare il tempo rimanente ogni secondo\n    function aggiornaTempoRimanente() {\n        var ora_corrente = new Date();\n        var tempo_corrente = ora_corrente.getTime();\n        var tempo_rimanente = tempo_23 - tempo_corrente;\n// Calcola il tempo rimanente in ore, minuti e secondi\n        var ore_rimanenti = Math.floor(tempo_rimanente / (1000 * 60 * 60));\n        var minuti_rimasti = Math.floor((tempo_rimanente % (1000 * 60 * 60)) / (1000 * 60));\n        var secondi_rimasti = Math.floor((tempo_rimanente % (1000 * 60)) / 1000);\n // Formatta il tempo rimanente nel formato HH:MM:SS\n        var tempo_rimanente_format = ('0' + ore_rimanenti).slice(-2) + ':' + ('0' + minuti_rimasti).slice(-2) + ':' + ('0' + secondi_rimasti).slice(-2);\n // Invia il messaggio al nodo Home Assistant per aggiornare il sensore\n        var newMsg = {\n            payload: {\n                state: tempo_rimanente_format,\n                attributes: {\n                    countdown: tempo_rimanente_format\n                }\n            }\n        };\n        node.send(newMsg);\n    }\n// Invoca la funzione per aggiornare il tempo rimanente ogni secondo\n    setInterval(aggiornaTempoRimanente, 1000);\n\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "428088abba73caf5"
            ]
        ]
    },
    {
        "id": "1d503c2093997c17",
        "type": "api-current-state",
        "z": "e9d21f01c61fb40c",
        "name": "Charge Mode State",
        "server": "1c37c350.3f926d",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.tesla_chargemode_select",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "af2a779af0d0eb19"
            ]
        ]
    },
    {
        "id": "428088abba73caf5",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Time switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off peak ok",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "off peak ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 1360,
        "wires": [
            [
                "9ffd7dfea8bb9f1a"
            ],
            [
                "c66a29ccdba3abb3"
            ]
        ]
    },
    {
        "id": "c66a29ccdba3abb3",
        "type": "ha-sensor",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Charge CountDown",
        "entityConfig": "2ceeeabdf7f347eb",
        "version": 0,
        "state": "tempo_rimanente_format",
        "stateType": "msg",
        "attributes": [
            {
                "property": "countdown",
                "value": "tempo_rimanente_format",
                "valueType": "msg"
            }
        ],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 990,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "8260ed5fb5732a70",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            [
                "c22dc58ff3798e62"
            ]
        ]
    },
    {
        "id": "c22dc58ff3798e62",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 1180,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "0f5827537fca051d"
            ]
        ]
    },
    {
        "id": "6ac696fd75ba22a7",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 780,
        "wires": [
            [
                "e8758da8660a21b3"
            ]
        ]
    },
    {
        "id": "e8758da8660a21b3",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 900,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "7fec97a37e78c75e"
            ]
        ]
    },
    {
        "id": "c022d015cbf4af62",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 600,
        "wires": [
            [
                "4b064bb92807578a"
            ]
        ]
    },
    {
        "id": "4b064bb92807578a",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 680,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "20a7d19266888522"
            ]
        ]
    },
    {
        "id": "536e1fb4e9a73cf6",
        "type": "function",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Target vs State",
        "func": "var target = global.get('homeassistant.homeAssistant.states[\"input_number.tesla_battery_charge_target\"].state');\nvar state = global.get('homeassistant.homeAssistant.states[\"sensor.model3_battery\"].state');\n\nlet t1 = parseFloat(target);\nlet s2 = parseFloat(state);\n\nif (t1 <= s2) {\n    msg.payload = 0; // Se la carica target Ã¨ minore dell'attuale restituisci il messaggio 0 e interrompi la ricarica\n} else {\n    msg.payload = 1; // Se la carica target Ã¨ maggiore dell'attuale, restituisci il messaggio 1 e prosegui con la ricarica\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 260,
        "wires": [
            [
                "98ce156eab869738"
            ]
        ]
    },
    {
        "id": "98ce156eab869738",
        "type": "switch",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 300,
        "wires": [
            [
                "ed7faae6d094df4a"
            ],
            [
                "c67ec0a3b2a2b2f9"
            ]
        ]
    },
    {
        "id": "efa32a942ebf5a6c",
        "type": "catch",
        "z": "e9d21f01c61fb40c",
        "g": "5ce77ad8d41253df",
        "name": "Catch Err",
        "scope": [
            "f8e0b2e971ba6fa3"
        ],
        "uncaught": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "6d3769fcc7dba1db"
            ]
        ]
    },
    {
        "id": "a8d929c28bbf6034",
        "type": "catch",
        "z": "e9d21f01c61fb40c",
        "g": "b6acf31e6685587b",
        "name": "Catch Err",
        "scope": [
            "4063f9f2e864b3f5"
        ],
        "uncaught": false,
        "x": 660,
        "y": 780,
        "wires": [
            [
                "f3998584b25d4935"
            ]
        ]
    },
    {
        "id": "06c19f7cbdabd93f",
        "type": "catch",
        "z": "e9d21f01c61fb40c",
        "g": "0464241e3946cd01",
        "name": "Catch Err",
        "scope": [
            "1bb88ae8252383fa"
        ],
        "uncaught": false,
        "x": 960,
        "y": 1520,
        "wires": [
            [
                "6267992fa89f436d"
            ]
        ]
    },
    {
        "id": "fe0b5d633e36f490",
        "type": "catch",
        "z": "e9d21f01c61fb40c",
        "name": "Catch Err",
        "scope": [
            "9f02f7cc2f9ace59"
        ],
        "uncaught": false,
        "x": 100,
        "y": 500,
        "wires": [
            [
                "5e7044b8f96b9d80"
            ]
        ]
    },
    {
        "id": "5e7044b8f96b9d80",
        "type": "delay",
        "z": "e9d21f01c61fb40c",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 420,
        "wires": [
            [
                "9f02f7cc2f9ace59"
            ]
        ]
    },
    {
        "id": "1c37c350.3f926d",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "id",
        "deviceSelector": "id",
        "entitySelector": "id",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "2ceeeabdf7f347eb",
        "type": "ha-entity-config",
        "server": "1c37c350.3f926d",
        "deviceConfig": "f6461edf5aeac603",
        "name": "Charge Countdown",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Charge Countdown"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "f6461edf5aeac603",
        "type": "ha-device-config",
        "name": "Charge CountDown",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    }
]